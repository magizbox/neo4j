{
    "docs": [
        {
            "location": "/", 
            "text": "Neo4J\n\n\nversion: 2.3.1\n\n\n\n\nNeo4j is an \nopen-source graph database\n, implemented in Java. The developers describe Neo4j as \"embedded, disk-based, fully transactional Java persistence engine that stores data structured in graphs rather than in tables\". Neo4j is the most popular graph database.", 
            "title": "Home"
        }, 
        {
            "location": "/#neo4j", 
            "text": "version: 2.3.1   Neo4j is an  open-source graph database , implemented in Java. The developers describe Neo4j as \"embedded, disk-based, fully transactional Java persistence engine that stores data structured in graphs rather than in tables\". Neo4j is the most popular graph database.", 
            "title": "Neo4J"
        }, 
        {
            "location": "/installation/", 
            "text": "Docker\n\n\nDocker Image: \nhttps://hub.docker.com/r/library/neo4j/\n\n\nRun these below command to open neo4j\n\n\n# clone datahub project\ngit clone https://github.com/magizbox/datahub.git\n\n# change folder to datahub directory\ncd datahub\n\n# set your config in docker-compose.yml\n\n# run docker\ndocker-compose up", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#docker", 
            "text": "Docker Image:  https://hub.docker.com/r/library/neo4j/  Run these below command to open neo4j  # clone datahub project\ngit clone https://github.com/magizbox/datahub.git\n\n# change folder to datahub directory\ncd datahub\n\n# set your config in docker-compose.yml\n\n# run docker\ndocker-compose up", 
            "title": "Docker"
        }, 
        {
            "location": "/cypher/", 
            "text": "Cypher\n\n\nSchema Discovery\n\n\nList all nodes label, list all relation type\n\n\n START n=node(*) RETURN distinct labels(n)\n\n\n match n-[r]-() return distinct type(r)\n\n\n\n\nUI Way\n: Click to Overtab in Neo4j Browser\n\n\nSample 10 entities\n\n\n MATCH (n:Entity) RETURN n, rand() as random ORDER BY random LIMIT 10\n\n\n\n\nGroup By\n\n\nhttp://www.markhneedham.com/blog/2013/02/17/neo4jcypher-sql-style-group-by-functionality/\n\n\nGraph Algorithms\n\n\nshortestPath\n, \ndijkstra\n\n\nPOST http://localhost:7474/db/data/node/72/paths\n\nHeaders\nAccept: application/json\nAuthorization: Basic bmVvNGo6cGFzc3dk\n\nBody\n{\n  \nto\n : \nhttp://localhost:7474/db/data/node/77\n,\n  \nmax_depth\n : 5,\n  \nrelationships\n : {\n    \ntype\n : \nFRIEND\n,\n    \ndirection\n : \nout\n\n  },\n  \nalgorithm\n : \nshortestPath\n\n}\n\n\n\n\nGraph Analystic\n\n\npagerank\n, \ncloseness_centrality\n, \nbetweenness_centrality\n, \ntriangle_count\n,\n\nconnected_components\n, \nstrongly_connected_components", 
            "title": "Cypher"
        }, 
        {
            "location": "/cypher/#cypher", 
            "text": "", 
            "title": "Cypher"
        }, 
        {
            "location": "/cypher/#schema-discovery", 
            "text": "List all nodes label, list all relation type   START n=node(*) RETURN distinct labels(n)  match n-[r]-() return distinct type(r)  UI Way : Click to Overtab in Neo4j Browser", 
            "title": "Schema Discovery"
        }, 
        {
            "location": "/cypher/#sample-10-entities", 
            "text": "MATCH (n:Entity) RETURN n, rand() as random ORDER BY random LIMIT 10", 
            "title": "Sample 10 entities"
        }, 
        {
            "location": "/cypher/#group-by", 
            "text": "http://www.markhneedham.com/blog/2013/02/17/neo4jcypher-sql-style-group-by-functionality/  Graph Algorithms  shortestPath ,  dijkstra  POST http://localhost:7474/db/data/node/72/paths\n\nHeaders\nAccept: application/json\nAuthorization: Basic bmVvNGo6cGFzc3dk\n\nBody\n{\n   to  :  http://localhost:7474/db/data/node/77 ,\n   max_depth  : 5,\n   relationships  : {\n     type  :  FRIEND ,\n     direction  :  out \n  },\n   algorithm  :  shortestPath \n}  Graph Analystic  pagerank ,  closeness_centrality ,  betweenness_centrality ,  triangle_count , connected_components ,  strongly_connected_components", 
            "title": "Group By"
        }, 
        {
            "location": "/client/", 
            "text": "In this article you will know how to connect to neo4j database from python.\n\n\nPython Client\n\n\nWe can use Py2neo to connect to neo4j from python.\n\n\nPy2neo\n is a client library and comprehensive toolkit for working with Neo4j from within Python applications and from the command line. The core library has no external dependencies and has been carefully designed to be easy and intuitive to use.\n\n\nSnippets to connect, create, add nodes, add relationship and update property\n\n\nfrom py2neo import authenticate, Graph, Node, Relationship\n# connect to graph\nauthenticate(\nlocalhost:7474\n, \nneo4j\n, \npasswd\n)\ngraph = Graph(\nhttp://localhost:7474/db/data/\n)\n\n# create unique\ngraph.schema.create_uniqueness_constraint('Person', 'name')\n\n# add nodes\ngraph.create(Node.cast('Person', {\nname\n: \nAlice\n}))\ngraph.create(Node.cast('Person', {\nname\n: \nBob\n}))\n\n# add relationship\nsource = graph.merge_one(\nPerson\n, \nname\n, \nAlice\n)\ntarget = graph.merge_one(\nPerson\n, \nname\n, \nBob\n)\ngraph.create_unique(Relationship(source, \nFRIEND\n, target))\n\n# update property\nalice = graph.merge_one(\nPerson\n, \nname\n, \nAlice\n)\nalice[\nage\n] = 30\nalice.push()", 
            "title": "Client"
        }, 
        {
            "location": "/client/#python-client", 
            "text": "We can use Py2neo to connect to neo4j from python.  Py2neo  is a client library and comprehensive toolkit for working with Neo4j from within Python applications and from the command line. The core library has no external dependencies and has been carefully designed to be easy and intuitive to use.  Snippets to connect, create, add nodes, add relationship and update property  from py2neo import authenticate, Graph, Node, Relationship\n# connect to graph\nauthenticate( localhost:7474 ,  neo4j ,  passwd )\ngraph = Graph( http://localhost:7474/db/data/ )\n\n# create unique\ngraph.schema.create_uniqueness_constraint('Person', 'name')\n\n# add nodes\ngraph.create(Node.cast('Person', { name :  Alice }))\ngraph.create(Node.cast('Person', { name :  Bob }))\n\n# add relationship\nsource = graph.merge_one( Person ,  name ,  Alice )\ntarget = graph.merge_one( Person ,  name ,  Bob )\ngraph.create_unique(Relationship(source,  FRIEND , target))\n\n# update property\nalice = graph.merge_one( Person ,  name ,  Alice )\nalice[ age ] = 30\nalice.push()", 
            "title": "Python Client"
        }
    ]
}